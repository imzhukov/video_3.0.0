#pragma once

/*
На данный момент существуют три типа файлов:
- Файл главных путей (c4f)
- Файл станционных путей (c4s)
- Файл габаритомера (c4t)
Несмотря на то, что в основе форматов этих файлов лежит один и тот-же формат, который мы условно назовем с4x,
они имеют различия.
- Они содержат различные типы данных, например, результаты измерений габарита могут быть только в c4t,
  а привязки меток к объектам только в файле c4s
- Они обрабатываются разными программами
- На разные типы файлов накладываются различные ограничения по количеству блоков одного типа
- В связи со всем вышеперечисленным файлы должны отличаться сигнатурой и пользовательским заголовком
  однако исторически сложилось так, что сигнатура у всех файлов одинаковая и имеет значение C4F.
При создании нового файла обязательно должен использоваться конкретный класс, например VMainFile.
Теоретически, можно использовать базовый класс VBaseDataFile для открытия произвольного файла на чтение.
однако это опасно, поэтому имеет смысл запретить создание объектов VBaseDataFile, и конкретизировать VBaseDataFile
неким классом VAnyFile который мог бы работать с любыми файлами, но только открывая их на чтение и работая исключительно 
с блоками данных но не с пользовательским заголовком.
Тип файла возможно определить только по расширению. Это плохо, но вводить другой способ уже поздно. Теоретически
можно определить тип файла по наличию в нем определенного типа данных, например:
	DHT_APRINFO - главные пути
	DHT_STATION_APRINFO - станционные пути
	DHT_GABA_TNL - тоннель
но это не изящно, кроме того, невозможно произвести подобную проверку при создании файла.
Когда мы открываем некий файл для решения конкретной задачи, мы, как правило, знаем с каким типом файла мы должны работать,
однако для решения некоторых общих задач может потребоваться работа с файлом любого типа, например: 
	Просмотр информации о файле;
	Удаление блока данных;
	Запись данных из блока в CSV;
	Построение графика.
Поэтому можно разрешить создание объектов типа VBaseDataFile, но список операций, допустимых для этого объекта будет 
ограничен.
Потребуется ли такой код:
	VBaseDataFile * file;
	file = new VMainFile;
и допустим ли он? Смысла в такой конструкции нет, так как VBaseDataFile и VMainFile различаются не только реализацией но
интерфейсом.

*/

#include "datatypes.h"
#include "types.h"
#include "VFileName.h"
#include "VMainFile.h"
#include "VStationFile.h"
#include "VMemoryMappedContainer.h"

static void RandomName(char *c, DWORD ct)
{
	const char l[] = "0123456789abcdefghijklmnopqrstuvwxyz";
	const DWORD n[] = { /*2176782336,*/ 60466176, 1679616, 46656, 1296, 36 };

	c[0] = l[ct / n[0]];
	c[1] = l[ct % n[0] / n[1]];
	c[2] = l[ct % n[0] % n[1] / n[2]];
	c[3] = l[ct % n[0] % n[1] % n[2] / n[3]];
	c[4] = l[ct % n[0] % n[1] % n[2] % n[3] / n[4]];
    c[5] = l[ct % n[0] % n[1] % n[2] % n[3] % n[4]];
	c[6] = '\0'; 
}